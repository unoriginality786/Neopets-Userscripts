// ==UserScript==
// @name         Use Hidden Shopkeepers
// @description  View and access shopkeeper options that neopets.com has hidden
// @version      2025.10.14
// @license      GNU GPLv3
// @match        https://www.neopets.com/select_shopkeeper.phtml*
// @author       Posterboy
// @namespace    https://www.youtube.com/@Neo_PosterBoy
// @icon         https://images.neopets.com/new_shopkeepers/t_1900.gif
// @grant        none
// ==/UserScript==

(() => {
    'use strict';

//=============================
// Set Styles for Modal Display
//=============================

    const addStyles = () => {
        const style = document.createElement('style');
        style.textContent = `
#shopkeeperModal {
display: none;
visibility: hidden;
opacity: 0;
position: fixed;
top: 10vh;
left: 50%;
transform: translateX(-50%);
background: #fff;
border: 1px solid #ccc;
border-radius: 10px;
padding: 16px;
z-index: 9999;
max-height: 70vh;
overflow-y: auto;
box-sizing: border-box;

display: grid;
grid-template-columns: repeat(5, 100px);
gap: 12px;
justify-content: center;

/* Optional fade transition */
transition: opacity 0.25s ease;
}

#shopkeeperModal.show {
display: grid;
visibility: visible;
opacity: 1;
}

#shopkeeperModal button.shopkeeper-modal-close {
position: absolute;
top: 8px;
right: 10px;
font-size: 20px;
font-weight: bold;
background: #ff4d4d;
color: #fff;
border: none;
border-radius: 50%;
width: 32px;
height: 32px;
line-height: 32px;
text-align: center;
cursor: pointer;
z-index: 10000;
box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);
transition: background 0.2s ease;
}

#shopkeeperModal button.shopkeeper-modal-close:hover {
background: #e60000;
}

#shopkeeperModal a.shopkeeper-image-link {
display: block;
width: 90px;
height: 90px;
border: 2px solid transparent;
border-radius: 6px;
transition: border-color 0.2s;
}

#shopkeeperModal a.shopkeeper-image-link:hover {
border-color: #4a90e2;
}

#shopkeeperModal img {
width: 100%;
height: 100%;
object-fit: contain;
pointer-events: none;
user-select: none;
display: block;
}
`;
        document.head.appendChild(style);
    };

    addStyles();

//=====================================
//Condensed URL listing for shopkeepers
//=====================================

    const generateImages = numbers => numbers.map(num => ({
        src: `https://images.neopets.com/new_shopkeepers/${num}.gif`,
        value: `${num}`,
    }));

    const categories = {
        Faeries: generateImages([
            29, 122, 199, 202, 203, 204, 206, 207, 318, 319,
            320, 321, 322, 323, 330, 333, 334, 336, 847, 848,
            849, 887, 888, 889, 890, 891, 892, 893, 894, 895,
            903, 904, 905, 914, 915, 916, 933, 934, 935, 936,
            950, 997, 998, 999, 1000, 1012, 1017, 1018, 1019,
            1020, 1128, 1129, 1130, 1131, 1222, 1224, 1254, 1307, 1308,
            1309, 1432, 1433, 1434, 1435, 1498, 1499, 1500, 1530, 1531,
            1532, 2130, 2131
        ]),
        Petpets: generateImages([
            224, 630, 631, 632, 633, 638, 639, 640, 641, 743,
            744, 745, 749, 812, 813, 814, 815, 819, 820, 821,
            822, 861, 911, 912, 913, 937, 938, 939, 940, 941,
            942, 946, 947, 948, 949, 1533, 1848, 1849, 1850, 1871,
            1872, 1873, 1874, 1883, 1884, 1885, 1886, 1891, 1892, 1893,
            1894, 1955, 1967, 2048, 2049, 2068, 2069, 2070, 2071, 2089,
            2090, 2091, 2114, 2115, 2154, 2155, 2157, 2164, 2165, 2168,
            2169, 2180, 2181, 2186, 2187, 2188, 2190, 2191, 2194, 2196,
            2197, 2202, 2203, 2206, 2207, 2212, 2213, 2214, 2215, 2218,
            2221, 2222, 2226, 2227, 2229, 2230, 2231, 2235, 2236, 2244,
            2245, 2246, 2253, 2255, 2268, 1025, 1029, 1030, 1031, 1040,
            1041, 1042, 1043, 1070, 1071, 1072, 1073, 1074, 1075, 1076,
            1100, 1101, 1102, 1153, 1154, 1155, 1160, 1161, 1162, 1174,
            1175, 1176, 1200, 1201, 1202, 1219, 1220, 1221, 1229, 1230,
            1231, 1281, 1282, 1283, 1284, 1314, 1316, 1317, 1330, 1331,
            1332, 1333, 1334, 1359, 1360, 1361, 1362, 1371, 1372, 1373,
            1386, 1387, 1388, 1389, 1406, 1407, 1408, 1409, 1456, 1457,
            1458, 1468, 1469, 1470, 1487, 1490, 1491, 1492, 1493, 1505,
            1506, 1507, 1511, 1512, 1513, 1514, 1519, 1520, 1521, 1534,
            1535, 1542, 1565, 1566, 1567, 1568, 1597, 1600, 1646, 1668,
            1686, 1757, 1784, 1785, 1786, 1806, 1816, 1817, 1818, 1847
        ]),
        Other: generateImages([
            36, 41, 89, 139, 154, 156, 159, 163, 164, 167,
            168, 172, 175, 179, 185, 174, 225, 701, 702, 703,
            803, 982, 983, 984, 1107, 1108, 1109, 1141, 1142, 1143,
            1144, 1739, 1740, 1855, 1857, 1858, 2044, 2045, 2046, 2047,
            2241, 2242, 2247, 2248, 2249, 2259, 2303
        ])
    };

//=====================
//Create User Interface
//=====================

    const createModal = () => {
        const modal = document.createElement('div');
        modal.id = 'shopkeeperModal';

        const closeBtn = document.createElement('button');
        closeBtn.textContent = 'Ã—';
        closeBtn.title = 'Close';
        closeBtn.className = 'shopkeeper-modal-close';
        closeBtn.onclick = () => {
            modal.classList.remove('show');
        };

        modal.appendChild(closeBtn);
        document.body.appendChild(modal);
        return modal;
    };

    const modal = createModal();

    const clearRadioInputs = () => {
        const form = document.select_form;
        if (!form) return;
        form.querySelectorAll('input[name="selected_sk"]').forEach(radio => radio.remove());
    };

    window.loadImagesInModal = images => {
        while (modal.children.length > 1) modal.removeChild(modal.lastChild);
        clearRadioInputs();

        images.forEach(({ src, value }) => {
            const link = document.createElement('a');
            link.href = 'javascript:void(0)';
            link.className = 'shopkeeper-image-link';

            const radio = document.createElement('input');
            radio.type = 'radio';
            radio.name = 'selected_sk';
            radio.id = `radio_${value}`;
            radio.value = value;
            radio.style.position = 'absolute';
            radio.style.opacity = 0;
            radio.style.pointerEvents = 'none';
            document.select_form.appendChild(radio);

            link.onclick = () => {
                radio.checked = true;
                document.select_form.submit();
            };

            const img = document.createElement('img');
            img.src = src;
            img.width = 90;
            img.height = 90;

            link.appendChild(img);
            modal.appendChild(link);

        });

        modal.classList.add('show');
    };

    const addCategories = () => {
        const categoryList = document.createElement('ul');
        categoryList.style.listStyle = 'none';
        categoryList.style.padding = 0;
        categoryList.style.display = 'flex';
        categoryList.style.gap = '10px';

        Object.keys(categories).forEach(key => {
            const li = document.createElement('li');
            const a = document.createElement('a');
            a.href = 'javascript:void(0)';
            a.textContent = key;
            a.style.cursor = 'pointer';
            a.style.textDecoration = 'underline';
            a.style.color = 'blue';

            a.onclick = () => {
                window.loadImagesInModal(categories[key]);
            };

            li.appendChild(a);
            categoryList.appendChild(li);
        });

        const form = document.querySelector('form[name="select_form"]');
        if (!form) {
            console.warn('[UI] select_form not found');
            return;
        }

        form.insertBefore(categoryList, form.firstChild);
    };

    window.categories = categories;
    addCategories();

})();