// ==UserScript==
// @name         Sales History Reformatter
// @description  Replaces table in Sales History with one that only contains practical information
// @version      1.0
// @license      GNU GPLv3
// @match        https://www.neopets.com/market.phtml?type=sales
// @author       Posterboy
// @icon         https://images.neopets.com/new_shopkeepers/t_1900.gif
// @namespace    https://www.youtube.com/@Neo_PosterBoy
// @grant        GM_addStyle
// ==/UserScript==

(function() {
    'use strict';

    window.addEventListener('load', () => {

        // Find Sales History
        const allTables = document.querySelectorAll('table');

        const existingTable = Array.from(allTables).find(table =>
            table.innerText.includes('Item') &&
            table.innerText.includes('Price') &&
            table.querySelectorAll('tr').length > 1
        );

        if (!existingTable) {
            return;
        }

        const tableContainer = existingTable.parentElement;

        // Remove Existing Table
        const loadingMessage = document.createElement('p');
        loadingMessage.textContent = 'Loading... Please wait.';
        tableContainer.insertBefore(loadingMessage, existingTable.nextSibling);
        existingTable.remove();

        // Filter Information
        const rows = Array.from(existingTable.querySelectorAll('tbody tr')).filter(row => {
            const cells = row.querySelectorAll('td');
            if (cells.length < 4) return false;

            const price = cells[3].innerText.trim();
            const parsedPrice = parseInt(price.replace(/[^\d]/g, ''), 10);
            return !isNaN(parsedPrice);
        });

        let itemsData = {};

        rows.forEach((row, index) => {
            const cells = row.querySelectorAll('td');
            const item = cells[1].innerText.trim();
            const price = cells[3].innerText.trim();

            const cleanItem = item.split('\n')[0].trim();
            const cleanPrice = formatPrice(price);
            if (!cleanPrice) {
                return;
            }

            const itemKey = `${cleanItem} - ${cleanPrice}`;

            if (itemsData[itemKey]) {
                itemsData[itemKey].quantity += 1;
            } else {
                itemsData[itemKey] = {
                    quantity: 1,
                    price: cleanPrice,
                    name: cleanItem
                };
            }
        });


        // Sort
        const sortedItems = Object.entries(itemsData).sort((a, b) => {
            if (b[1].quantity !== a[1].quantity) {
                return b[1].quantity - a[1].quantity;
            }
            return parseInt(b[1].price.replace(/[^\d]/g, ''), 10) - parseInt(a[1].price.replace(/[^\d]/g, ''), 10);
        });

        // Insert new table
        let resultTable = document.createElement('table');
        resultTable.style.border = '1px solid #ddd';
        resultTable.style.margin = '20px auto';
        resultTable.style.width = '80%';
        resultTable.style.borderCollapse = 'collapse';
        resultTable.style.padding = '8px';

        let tableHeader = `
            <tr>
                <td bgcolor="#dddd77" align="center"><b>Quantity</b></td>
                <td bgcolor="#dddd77" align="center"><b>Item</b></td>
                <td bgcolor="#dddd77" align="center"><b>Price</b></td>
            </tr>
        `;
        resultTable.innerHTML = tableHeader;

        let previousQuantity = null;

        sortedItems.forEach(([itemName, data], index) => {
            if (previousQuantity !== null && previousQuantity !== data.quantity) {
                let separatorRow = document.createElement('tr');
                separatorRow.style.borderTop = '4px solid #dddd77';
                resultTable.appendChild(separatorRow);
            }

            const row = document.createElement('tr');
            row.innerHTML = `
                <td bgcolor="#ffffcc" align="center">${data.quantity}</td>
                <td bgcolor="#ffffcc" align="center">${data.name}</td>
                <td bgcolor="#ffffcc" align="center">${data.price}</td>
            `;
            resultTable.appendChild(row);

            previousQuantity = data.quantity;
        });

        // Clear History Button
        const clearButtonRow = document.createElement('tr');
        clearButtonRow.innerHTML = `
            <td bgcolor="#dddd77" align="center" valign="center" colspan="3">
                <form action="market.phtml" method="post">
                    <input type="hidden" name="type" value="sales">
                    <input type="hidden" name="clearhistory" value="true">
                    <input type="submit" value="Clear Sales History">
                </form>
            </td>
        `;

        resultTable.appendChild(clearButtonRow);
        tableContainer.insertBefore(resultTable, loadingMessage.nextSibling);
        loadingMessage.remove();


        function formatPrice(price) {
            const number = parseInt(price.replace(/[^\d]/g, '').trim(), 10);
            if (isNaN(number)) return null;
            return number.toLocaleString() + " NP";
        }
    });
})();
